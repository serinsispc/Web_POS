@model WebCliente.ViewModels.MediosDePagoViewModels
@using Newtonsoft.Json
@{
    ViewBag.Title = "Medios de Pago";
    Layout = "~/Views/Shared/_LayoutMenu.cshtml";
}

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Medios de pago de la venta</h5>
    </div>
    <div class="card-body">
        @Html.AntiForgeryToken()
        <div class="table-responsive">
            <table class="table table-sm align-middle">
                <thead>
                    <tr>
                        <th style="width: 28%">Medio de pago DIAN</th>
                        <th style="width: 28%">Medio de pago interno</th>
                        <th style="width: 20%">Valor</th>
                        <th style="width: 24%">Acciones</th>
                    </tr>
                </thead>
                <tbody id="tbody-medios">
                    @foreach (var p in Model.V_VentasPagosInternos)
                    {
                        // ==== Deducir id DIAN por nombre (case-insensitive) sin usar ?? entre tipos distintos ====
                        var dianIdByName = 0;

                        var pmMatch = (Model.PaymentMethods != null)
                            ? Model.PaymentMethods.FirstOrDefault(m =>
                                string.Equals(
                                    (m.name ?? "").Trim(),
                                    (p.medioDePago ?? "").Trim(),
                                    System.StringComparison.OrdinalIgnoreCase
                                )
                              )
                            : null;

                        if (pmMatch != null)
                        {
                            dianIdByName = pmMatch.id;
                        }

                        <tr data-row-id="@p.id"
                            data-current-interno-id="@p.idMedioDePagointerno"
                            data-current-dian-id="@dianIdByName">

                            <td class="text-nowrap">
                                <select class="form-select form-select-sm sel-dian w-auto" style="min-width:220px">
                                    <option value="0">-- Selecciona --</option>
                                    @foreach (var m in Model.PaymentMethods)
                                    {
                                        var selected = string.Equals(
                                            (m.name ?? "").Trim(),
                                            (p.medioDePago ?? "").Trim(),
                                            System.StringComparison.OrdinalIgnoreCase
                                        ) ? "selected" : "";
                                        <option value="@m.id" @Html.Raw(selected)>@m.name</option>
                                    }
                                </select>
                            </td>


                            <td class="text-nowrap">
                                <div class="d-flex align-items-center flex-nowrap gap-2">
                                    <select class="form-select form-select-sm sel-interno w-auto" style="min-width:220px">
                                        <!-- Se llena por JS -->
                                    </select>
                                    <small class="text-muted">Actual: <strong>@(p.medioPagoInterno ?? "-")</strong></small>
                                </div>
                            </td>


                            <td class="text-nowrap">
                                <div class="input-group input-group-sm w-auto" style="min-width:140px">
                                    <span class="input-group-text">$</span>
                                    <input type="text"
                                           class="form-control inp-valor text-end"
                                           inputmode="numeric" autocomplete="off"
                                           value="@(string.Format(new System.Globalization.CultureInfo("es-CO"), "{0:N0}", p.valorPago))" />
                                </div>
                            </td>



                            <td class="text-nowrap">
                                <button type="button" class="btn btn-sm btn-primary btn-guardar">
                                    <i class="bi bi-save"></i> Guardar cambios
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
(function(){
    // === Datos del modelo convertidos a JSON para el JS (con fallback a []) ===
    const paymentMethods = (@Html.Raw(JsonConvert.SerializeObject(Model.PaymentMethods)) ) || [];
    const mapInternos    = (@Html.Raw(JsonConvert.SerializeObject(Model.V_R_MediosDePagosInternos)) ) || [];

    // === AntiForgery Token ===
    const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
    const AF_TOKEN = tokenInput ? tokenInput.value : "";

    // === Funciones auxiliares ===
    function filtrarInternosPorDian(dianId){
        dianId = parseInt(dianId || 0, 10);
        return (mapInternos || []).filter(x => parseInt(x.idMedioDePago || 0, 10) === dianId);
    }

    function normalizarValorParaNumero(v){
        if (v == null) return "";
        let s = String(v).trim();
        s = s.replace(/[^\d.,-]/g, "");
        if (s.includes(".") && s.includes(",")){
            s = s.replace(/\./g, "").replace(",", ".");
        } else if (!s.includes(".") && s.includes(",")){
            s = s.replace(",", ".");
        } else {
            const onlyDots = s.includes(".") && !s.includes(",");
            if (onlyDots) s = s.replace(/\./g, "");
        }
        return s;
    }

    function poblarInternosSelect(row){
        const selDian = row.querySelector(".sel-dian");
        const selInterno = row.querySelector(".sel-interno");
        const currentInternoId = parseInt(row.getAttribute("data-current-interno-id") || "0", 10);

        const dianId = parseInt(selDian.value || "0", 10);
        const opciones = filtrarInternosPorDian(dianId);

        selInterno.innerHTML = `<option value="0">-- Selecciona --</option>`;
        opciones.forEach(op => {
            const opt = document.createElement("option");
            opt.value = op.idMediosDePagoInternos;
            opt.textContent = op.nombreRMPI;
            selInterno.appendChild(opt);
        });

        if (currentInternoId > 0) {
            const existe = opciones.some(x => parseInt(x.idMediosDePagoInternos,10) === currentInternoId);
            selInterno.value = existe ? String(currentInternoId) : "0";
        }
    }

    function inicializarFila(row){
        const selDian = row.querySelector(".sel-dian");
        if (!selDian.value || selDian.value === "0"){
            const fallbackDian = row.getAttribute("data-current-dian-id");
            if (fallbackDian && [...selDian.options].some(o => o.value === fallbackDian)){
                selDian.value = fallbackDian;
            }
        }
        poblarInternosSelect(row);
    }

  async function postGuardarCambios(formFields){
   // Después (mismo controller donde estás: HistorialVentas):
const url = '@Url.Action("GuardarMedio", "HistorialVentas", new { area = "" })';
    const body = new URLSearchParams(formFields);

    const resp = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        // También por cabecera (útil en algunos setups):
        "RequestVerificationToken": formFields["__RequestVerificationToken"]
      },
      body,
      credentials: "same-origin" // asegura envío de cookies (antiforgery/auth)
    });

    const contentType = resp.headers.get("content-type") || "";
    const text = await resp.text();

    if (!resp.ok) {
      throw new Error(`HTTP ${resp.status} ${resp.statusText}: ${text.slice(0,200)}`);
    }
    if (contentType.indexOf("application/json") >= 0) {
      return JSON.parse(text);
    }

    // Llegó HTML -> casi seguro login, antiforgery inválido o View devuelta
    if (text.toLowerCase().includes("<!doctype") || text.toLowerCase().includes("<html")) {
      throw new Error("El servidor devolvió HTML (¿redirección a login, antiforgery inválido o la acción devolvió una View?).");
    }
    throw new Error("Respuesta no-JSON: " + text.slice(0,200));
  }


    // === Inicialización de filas ===
    const tbody = document.getElementById("tbody-medios");
    [...tbody.querySelectorAll("tr[data-row-id]")].forEach(tr => {
        inicializarFila(tr);

        // Cambio de DIAN => recargar internos dependientes
        tr.querySelector(".sel-dian").addEventListener("change", () => {
            tr.setAttribute("data-current-interno-id", "0");
            poblarInternosSelect(tr);
        });

        // Guardar cambios
        tr.querySelector(".btn-guardar").addEventListener("click", async () => {
            const idFila   = parseInt(tr.getAttribute("data-row-id") || "0", 10);
            const dianId   = parseInt(tr.querySelector(".sel-dian").value || "0", 10);
            const internoId= parseInt(tr.querySelector(".sel-interno").value || "0", 10);
            const valorRaw = tr.querySelector(".inp-valor").value;
            const valorNum = parseFloat(normalizarValorParaNumero(valorRaw) || "0");

            if (!idFila){ alert("No se encontró el ID de la fila."); return; }
            if (!dianId){ alert("Selecciona el medio de pago DIAN."); return; }
            if (!internoId){ alert("Selecciona el medio de pago interno."); return; }
            if (isNaN(valorNum) || valorNum < 0){ alert("Ingresa un valor válido."); return; }

            const formFields = {
                "__RequestVerificationToken": AF_TOKEN,
                "id": idFila,
                "idMedioPagoDian": dianId,
                "idMedioPagoInterno": internoId,
                "valor": valorNum.toString()
            };

            const btn = tr.querySelector(".btn-guardar");
            btn.disabled = true;
            try{
                const r = await postGuardarCambios(formFields);
                if (r && r.estado === 1){
                    tr.setAttribute("data-current-interno-id", String(internoId));
                    alert("✅ Cambios guardados: " + (r.mensaje || "OK"));
                } else {
                    alert("⚠️ No se pudo guardar: " + (r?.mensaje || "Error desconocido."));
                }
            }catch(e){
                alert("❌ Error al guardar: " + e.message);
            }finally{
                btn.disabled = false;
            }
        });
    });
})();
</script>
